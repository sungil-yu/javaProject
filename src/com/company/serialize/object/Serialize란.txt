
자바에서 직렬화란 자바 시스템 내부에서 사용되는 객체 또는 데이터를 외부의 자바 시스템에서도 사용할 수 있도록 바이트형태로 데이터를 변환하는 기술과
역으로 바이트로 변환된 데이터를 다시 객체로 변환하는 기술을 이야기합니다.

시스템적으로는 JVM에 상주하는 객체데이터를 바이트로 변환하거나 직렬화된 바이트 형태의 데이터를 다시 객체로 변환해서 JVM에 상주시키는 형태


자바 직렬화를 설명하기전 다른 데이터 직렬화 종류

1. 문자열 형태의 직렬화 방법

직접 데이터를 문자열 형태로 확인 가능한 직렬화방법, 범용적인 API나 데이터를 변환하여 추출할 때 많이 사용됨

표 형태의 다량의 데이터를 직렬화시 CSV가 많이 쓰이고, 구조적인데이터는 XML, 근래에는 JSON형태를 많이사용

CSV : 데이터를 표현하는 가장 많이 사용되는 방법 중 하나로 , 콤마를 기준으로 데이터를 구분하는 방법

JSON : 최근 가장 많이 사용하는 포맷으로 자바스크립트 에서 쉽게 사용이가능하고, 다른 데이터 포맷 방식에 비해 오버헤드가 적다.

CSV, JSON 프로토콜 버퍼 등은 시스템의 고유 특성과 상관없는 대부분의 시스템에서의 데이터 교환 시 많이 사용됩니다.
하지만 자바 직렬화 형태의 데이터 교환은 자바 시스템간의 데이터 교환을 위해서 존재한다.

그럼 자바도 CSV나 JSON을 사용하면 되지 왜 Serialize를 사용하는데??
정답은 없다. 목적에 따라 적절하게 써야 한다.

장점?
 - 자바 시스템에서 개발에 최적화되어있다. 복잡한 데이터 구조의 클래스의 객체라도 직렬화 기본 조건만 지키면 바로 직렬화가 가능 역직렬화도.

 언제 어디서 사용될까?

 JVM의 메모리에서만 상주되어 있는 객체 데이터를 그대로 영속화가 필요할 때 사용됩니다. 시스템이 종료되더라도 없지지지 않는 장점을가지며 영속화된 데이터이기때문에
 네트워크로 전송도 가능합니다.

 그리고 필요할 때 역직렬화를 통해 객체로 사용가능

 EX) 서블릿 세션
  서블릿 기반의 WAS들은 대부분 세션의 자바 직렬화를지원하고 있습니다.
  단순히 세션을 서블릿 메모리 위에서 운용한다면 직렬화가 필요없지만 파일로 저장하거나 세션클러스터링, DB를저장하는 옵션 등을 선택하게 되면 세션 자체가
  직렬화가 되어서 저장된 후 전달됩니다.

  그래서 세션에 필요한 객체는 java.io.Serializable 인터페이스를 구현해(implements) 해두는 것을 추천합니다.

  캐시
   자바시스템에서 퍼포먼스를위해 Ehcache, Redis, 라이브러리를 시스템에 많이 이용하게 됩니다.
   자바 시스템을 개발하다 보면 상당수의 클래스가만들어집니다. 예를 들면 DB를 조회한 후 가져온 데이터 객체 같은 경우 실시간 형태로 요구하는 데이터가
   아니라면 메모리, 외부 조정소, 파일 등을 저장소로 이용해서 데이터 객체를 저장한 후 동일 요청이 올시 DB에 재요청하는 것이나라 저장된 객체를 찾아서,
   응답하게 하는 형태를 보통 캐시를 사용한다고 합니다.

   캐시를 이용하면 DB에 대한 리소를 절약할 수 있기 때문에 많은 시스템에서 자주활용됩니다.

   자바RMI(Remote Method Invocation)
   원격 시스템 간의 메시지 교환을 위해서 자바에서 지원하는 기술.
   보통은원격의 시스템과 통신을 위해서 IP와 포트를 이용해서 소켓통신을 해야하지만 RMI는 추상화하여 원격에 있는 시스템의
   메서드를 로컬 시스템의 메서드인 것처럼 호출할 수 있습니다.
   원격의 시스템의 메서드를 호출 시에 전달하는 메시지(보통 객체)를 자동으로 직렬화 시켜 사용됩니다.
   받은쪽은 역직렬화를 하여 사용합니다.

   자바 개발자 입장에서는 상당히 쉽고 빠르게 사용할 수 있도록 만든 기술입니다.

   JSON , CSV는 특정 라이브러리를 도입해야 쉽게 개발이 가능하며, 구조가 복잡하면 직접매핑시켜줘야 하는 작업도 포함하게 됩니다.
   그것에 비해 자바 직렬화는 복잡한 객체도쉽게 기본 라이브러리만 사용해 직렬화 역직렬화가가능합니다.

   다만 신경써야하는 부분이 존재합니다.

   1. 역 직렬화시 클래스 구조변경 문제

   직렬화시킨 클래스의 구조와 역직렬화시켜서 바인딩할 클래스의 구조가 다르다면 InvalidClassException이 발생합니다.

   그럼 serialVersionUID에 문제가 잇는 것인데, 자바 직렬화스펙을 보면
   SUID는 필수 값은 아니다. 호환 가능한 클래스는 SUID값이 고정되어 있다.
   만약 SUID가 선언되어 있지 않으면 클래스의 기본 해쉬값을 사용한다.
   그렇기에 SUID값을 관리해주어야 하고
   타입의 변환에도 매우 엄격하다.

   정리

   SUID의 값은 개발 시 직접관리해야한다.
   SUID의 값이 동일하면 멤버 변수 및 메서드 추가는 크게 문제가 없다.
   역직렬화 대상의 클래스의 타입변경을 지양해야한다.
   외부(캐시, DB , NoSQL)에 장기간 저장될 정보는 자바 직렬화 사용을 지양해야 합니다. 대상클래스가 언제 변경될지 모르기 때문에
   결국 역직렬 화가 되지 않을 때와 같은 예외처리는 기본적으로 해야한다.
   용량이 크다.메타 정보도 가지고 있기 때문. 자바 웹 시스템에서 가장 많이 사용되는 스프링 프레임워크에서 기본적으로 지원하는 캐시 모듈 중
   외부 시스템에 저장하는 형태에서 기본적으로 자바 직렬화 형태로 제공된다. (Spring Data Redis, Spring Session...)

   용량 결론
   B2C와 같은 시스템에서 자바 직렬화 정보를 캐시 서버에 저장할 때는 비효율적인 문제를 가지고 있다. 용량크기에 따른 네트워크 비용과, 캐시 서버 비용
   JSON형태 혹은 다른 형태를 새로운 서비스를 할 때는 고려해보는 것이 좋다.


   추천 전략
   1. 외부 저장소로 저장되는 데이터는 짧은 만료시간의 데이터를 제외하고 자바 직렬화 사용을 지양한다.
   2. 역직렬화 시 반드시 예외가 생긴다는 것을 생각하고 개발
   3. 자주 변경되는 비지니스적 데이터는 자바 직렬화를 사용하지 않는다.
   4. 긴 만료 시간을 가지는 데이터는 다른 데이터 포맷을 사용하여 저장한다.!
